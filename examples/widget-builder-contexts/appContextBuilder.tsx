// Generated by cra-context-generator@1.4.0 on Mon, 06 Feb 2023 14:42:10 GMT.
// Do not edit this file manually unless you disabled its code generation.
import React from 'react';
import ReactDOM from 'react-dom/client';
import { History, Location } from 'history';
import { AppContextProvider, IAppState, AppState, DefaultAppState } from './appContext';
import { createChildren, getHistory, deserializePathname, serializePathname } from './contextBuilderUtils';

/**
 * The component props interface.
 */
interface IComponentProps {
    rendered?: () => void;
}

/**
 * The App context interface.
 */
export interface IAppContext {
    /**
     * The component to be rendered.
     */
    Component: (props: IComponentProps) => JSX.Element;

    /**
     * Renderes the component.
     *
     * @param {Element | DocumentFragment | null} container The container. Optional parameter.
     */
    render: (container: Element | DocumentFragment | null) => Promise<void>;

    /**
     * Gets the language.
     */
    getLanguage: () => string | undefined;

    /**
     * Sets the language.
     */
    setLanguage: (language?: string) => void;

    /**
     * Gets the num.
     */
    getNum: () => number;

    /**
     * Sets the num.
     */
    setNum: (num: number) => void;

    /**
     * Gets the theme.
     */
    getTheme: () => string | undefined;

    /**
     * Sets the theme.
     */
    setTheme: (theme?: string) => void;
}

/**
 * The context props interface.
 */
interface IContextProps {
    children: React.ReactNode;
    appState: IAppState;
    language?: string;
    languageSetEventHandler?: (language?: string) => void;
    languageUrlParam?: string;
    customLocationFromLanguage?: (language: string | undefined, pathName: any, urlParam: string) => any;
    customLanguageFromLocation?: (pathName: any, urlParam: string) => string | null;
    num: number;
    numSetEventHandler?: (num: number) => void;
    numUrlParam?: string;
    customLocationFromNum?: (num: number, pathName: any, urlParam: string) => any;
    customNumFromLocation?: (pathName: any, urlParam: string) => number | null;
    theme?: string;
    themeSetEventHandler?: (theme?: string) => void;
    themeUrlParam?: string;
}

/**
 * The App context builder.
 * Helps to build the App context and manage its state.
 */
export class AppContextBuilder {
    private props: IContextProps = {
        children: undefined,
        appState: DefaultAppState,
        language: DefaultAppState.languageState,
        languageSetEventHandler: undefined,
        languageUrlParam: undefined,
        customLocationFromLanguage: undefined,
        customLanguageFromLocation: undefined,
        num: DefaultAppState.numState,
        numSetEventHandler: undefined,
        numUrlParam: undefined,
        customLocationFromNum: undefined,
        customNumFromLocation: undefined,
        theme: DefaultAppState.themeState,
        themeSetEventHandler: undefined,
        themeUrlParam: undefined,
    };

    /**
     * Builds the App Context.
     *
     * @returns {IAppContext} The App Context Interface.
     */
    build() {
        const {
            language: initialLanguage,
            languageUrlParam,
            customLocationFromLanguage,
            customLanguageFromLocation,
            num: initialNum,
            numUrlParam,
            customLocationFromNum,
            customNumFromLocation,
            theme: initialTheme,
            themeUrlParam,
        } = this.props;

        const syncStateWithLocation = (appState: IAppState, location: Location) => {
            const {
                setLanguageState,
                setNumState,
                setThemeState,
            } = appState;
            const pathname = deserializePathname(location.pathname);
            const language =
                (languageUrlParam && customLanguageFromLocation && customLanguageFromLocation(pathname, languageUrlParam) ||
                (languageUrlParam && pathname[languageUrlParam] && decodeURIComponent(pathname[languageUrlParam])));
            const num =
                (numUrlParam && customNumFromLocation && customNumFromLocation(pathname, numUrlParam) ||
                (numUrlParam && pathname[numUrlParam] && JSON.parse(decodeURIComponent(pathname[numUrlParam]))));
            const theme = themeUrlParam && pathname[themeUrlParam] && decodeURIComponent(pathname[themeUrlParam]);
            language && setLanguageState && setLanguageState(language);
            num && setNumState && setNumState(num);
            theme && setThemeState && setThemeState(theme);
        };

        const syncLocationWithState = (appState: IAppState, history: History) => {
            const {
                languageState,
                numState,
                themeState,
            } = appState;
            const pathname = deserializePathname(history.location.pathname);
            (languageUrlParam && customLocationFromLanguage && customLocationFromLanguage(languageState, pathname, languageUrlParam)) ||
                (languageUrlParam && (pathname[languageUrlParam] = languageState && encodeURIComponent(languageState)));
            (numUrlParam && customLocationFromNum && customLocationFromNum(numState, pathname, numUrlParam)) ||
                (numUrlParam && (pathname[numUrlParam] = numState && encodeURIComponent(JSON.stringify(numState))));
            themeUrlParam && (pathname[themeUrlParam] = themeState && encodeURIComponent(themeState));
            const serializedPathname = serializePathname(pathname);
            history.replace({ pathname: serializedPathname});
        };

        const Component = (props: IComponentProps) => {
            const didMount = React.useRef(false);
            const history = getHistory();
            const appState = AppState({
                language: initialLanguage,
                num: initialNum,
                theme: initialTheme,
            });
            const {
                children,
                language,
                languageUrlParam,
                num,
                numUrlParam,
                theme,
                themeUrlParam,
                ...rest
            } = this.props;
            const {
                rendered
            } = props;
            React.useEffect(rendered ? rendered : () => {}, []);
            React.useEffect(() => syncStateWithLocation(appState, history.location), []);
            React.useEffect(() => {
                if (didMount.current) {
                    syncLocationWithState(appState, history);
                } else {
                    didMount.current = true;
                }
            }, [appState, history]);
            this.props.appState = appState;
            return (
                <AppContextProvider {...rest} appState={appState}>
                    {children}
                </AppContextProvider>
            );
        };

        const render = (container: Element | DocumentFragment | null) =>
            new Promise<void>((resolve, reject) => {
                try {
                    const rendered = () => resolve();
                    const props = {
                        rendered
                    };
                    ReactDOM
                        .createRoot((container || document.createElement('div')) as HTMLElement)
                        .render(
                            <React.StrictMode>
                                <Component { ...props } />
                            </React.StrictMode>
                        );
                } catch (e) {
                    reject(e);
                }
            });

        const getLanguage = () => {
            const { languageState } = this.props.appState || {};
            return languageState;
        };

        const setLanguage = (language?: string) => {
            const { setLanguageState } = this.props.appState || {};
            setLanguageState && setLanguageState(language);
        };
        const getNum = () => {
            const { numState } = this.props.appState || {};
            return numState;
        };

        const setNum = (num: number) => {
            const { setNumState } = this.props.appState || {};
            setNumState && setNumState(num);
        };
        const getTheme = () => {
            const { themeState } = this.props.appState || {};
            return themeState;
        };

        const setTheme = (theme?: string) => {
            const { setThemeState } = this.props.appState || {};
            setThemeState && setThemeState(theme);
        };

        const context: IAppContext = {
            Component,
            render,
            getLanguage,
            setLanguage,
            getNum,
            setNum,
            getTheme,
            setTheme,
        };

        return context;
    }

    /**
     * Sets the children.
     * All the children within the context will have the same state.
     *
     * @param {(() => JSX.Element) | (Array<() => JSX.Element>)} children The children.
     */
    withChildren(children: (() => JSX.Element) | (Array<() => JSX.Element>)) {
        this.props.children = createChildren(children);
        return this;
    }

    /**
     * Sets the language. Default value: 'en'.
     *
     * @param {string} language The language.
     */
    withLanguage(language: string) {
        this.props.language = language;
        return this;
    }

    /**
     * Sets the language set event handler.
     *
     * @param {(language?: string) => void} languageSetEventHandler The language set event handler.
     */
    withLanguageSetEventHandler(languageSetEventHandler: (language?: string) => void) {
        this.props.languageSetEventHandler = languageSetEventHandler;
        return this;
    }

    /**
     * Sets the language url param to be synchronized with the language state.
     *
     * @param {string} languageUrlParam The language url param.
     */
    withLanguageUrlParam(languageUrlParam: string) {
        this.props.languageUrlParam = languageUrlParam;
        return this;
    }

    /**
     * Sets the custom location from language function.
     *
     * @param {(language: string | undefined, pathName: any, urlParam: string) => any} customLocationFromLanguage The custom location from language.
     */
    withCustomLocationFromLanguage(customLocationFromLanguage: (language: string | undefined, pathName: any, urlParam: string) => any) {
        this.props.customLocationFromLanguage = customLocationFromLanguage;
        return this;
    }

    /**
     * Sets the custom language from location function.
     *
     * @param {(pathName: any, urlParam: string) => string | null} customLanguageFromLocation The custom language from location.
     */
    withCustomLanguageFromLocation(customLanguageFromLocation: (pathName: any, urlParam: string) => string | null) {
        this.props.customLanguageFromLocation = customLanguageFromLocation;
        return this;
    }

    /**
     * Sets the num. Default value: 0.
     *
     * @param {number} num The num.
     */
    withNum(num: number) {
        this.props.num = num;
        return this;
    }

    /**
     * Sets the num set event handler.
     *
     * @param {(num: number) => void} numSetEventHandler The num set event handler.
     */
    withNumSetEventHandler(numSetEventHandler: (num: number) => void) {
        this.props.numSetEventHandler = numSetEventHandler;
        return this;
    }

    /**
     * Sets the num url param to be synchronized with the num state.
     *
     * @param {string} numUrlParam The num url param.
     */
    withNumUrlParam(numUrlParam: string) {
        this.props.numUrlParam = numUrlParam;
        return this;
    }

    /**
     * Sets the custom location from num function.
     *
     * @param {(num: number, pathName: any, urlParam: string) => any} customLocationFromNum The custom location from num.
     */
    withCustomLocationFromNum(customLocationFromNum: (num: number, pathName: any, urlParam: string) => any) {
        this.props.customLocationFromNum = customLocationFromNum;
        return this;
    }

    /**
     * Sets the custom num from location function.
     *
     * @param {(pathName: any, urlParam: string) => number | null} customNumFromLocation The custom num from location.
     */
    withCustomNumFromLocation(customNumFromLocation: (pathName: any, urlParam: string) => number | null) {
        this.props.customNumFromLocation = customNumFromLocation;
        return this;
    }

    /**
     * Sets the theme. Default value: 'default'.
     *
     * @param {string} theme The theme.
     */
    withTheme(theme: string) {
        this.props.theme = theme;
        return this;
    }

    /**
     * Sets the theme set event handler.
     *
     * @param {(theme?: string) => void} themeSetEventHandler The theme set event handler.
     */
    withThemeSetEventHandler(themeSetEventHandler: (theme?: string) => void) {
        this.props.themeSetEventHandler = themeSetEventHandler;
        return this;
    }

    /**
     * Sets the theme url param to be synchronized with the theme state.
     *
     * @param {string} themeUrlParam The theme url param.
     */
    withThemeUrlParam(themeUrlParam: string) {
        this.props.themeUrlParam = themeUrlParam;
        return this;
    }
};

export default AppContextBuilder;
